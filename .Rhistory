library(dplyr)
library(stats)
?filter
0.
?rgamma
roxygen2::roxygenize()
?importFrom()
?namespace_roclet
roxygen2::roxygenize()
roxygen2::roxygenize()
?qpdf
??qpdf
roxygen2::roxygenize()
roxygen2::roxygenize()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.getenv("PATH")
getwd()
devtools::use_travis()
?devtools::build_vignettes()
library(devtools)
?build_vignettes
?rmarkdown::html_vignette
?devtools::build_vignettes()
?devtools::build_vignettes()
getwd()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
?install.packages
devtools::build()
devtools::build()
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/make_anglers.R', echo=TRUE)
anglers <- make_anglers()
library(dplyr)
anglers <- make_anglers()
anglers
class(anglers)
names(anglers)
library(ggplot2)
# Histogram overlaid with kernel density curve
anglers %>%
ggplot(aes(x=tripLength)) +
geom_histogram(aes(y=..density..), # Histogram with density instead of count on y-axis
binwidth=.1,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
anglers %>%
ggplot(aes(x=trip_length)) +
geom_histogram(aes(y=..density..), # Histogram with density instead of count on y-axis
binwidth=.1,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
anglers %>%
ggplot(aes(x=trip_length)) +
geom_histogram(aes(y=..density..), # Histogram with density instead of count on y-axis
binwidth=.1,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
anglers %>%
get_total_values(startTime = 0, waitTime = 8, samplingProb = 8/12, meanCatchRate = 2.5)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/get_total_values.R', echo=TRUE)
anglers %>%
get_total_values(startTime = 0, waitTime = 8, samplingProb = 8/12, meanCatchRate = 2.5)
?get_total_values()
anglers %>%
get_total_values(start_time = 0, wait_time = 8, sampling_prob = 8/12, mean_catch_rate = 2.5)
devtools::build()
devtools::build()
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/conduct_multiple_surveys.R', echo=TRUE)
sim <- conduct_multiple_surveys(n_sims = 20, start_time = 0, wait_time = 8, n_sites = 1,
n_anglers = 100, sampling_prob = 8/12,
mean_catch_rate = 2.5, fishing_day_length = 12)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/simulate_bus_route.R', echo=TRUE)
sim <- conduct_multiple_surveys(n_sims = 20, start_time = 0, wait_time = 8, n_sites = 1,
n_anglers = 100, sampling_prob = 8/12,
mean_catch_rate = 2.5, fishing_day_length = 12)
sim
sim <-
sim %>%
mutate(est_catch = Ehat * catch_rate_ROM)
sim %>%
ggplot(aes(x = true_catch, y = est_catch)) +
geom_abline(intercept = mod$coefficients[1], slope = mod$coefficients[2],
colour = "red", size = 1.01)
sim <- simulate_bus_route(start_time = 0, wait_time = 8, n_sites = 1, n_anglers = 100,
sampling_prob = 8/12, mean_catch_rate = 2.5, fishing_day_length = 12)
sim
devtools::build()
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/conduct_multiple_surveys.R', echo=TRUE)
sim <- conduct_multiple_surveys(n_sims = 20, start_time = 0, wait_time = 8, n_sites = 1,
n_anglers = 100, sampling_prob = 8/12,
mean_catch_rate = 2.5, fishing_day_length = 12)
sim
devtools::build()
n_sims <- 2
bus_route <- as.data.frame(matrix(data = NA, ncol = 5, nrow = n_sims, byrow=T))
names(bus_route) <- c("Ehat", "catch_rate_ROM", "true_catch", "true_effort", "mean_lambda")
class(bus_route)
roxygen2::roxygenize()
version
devtools::run_examples()
?dontrun
devtools::build()
devtools::build()
devtools::build()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/conduct_multiple_surveys.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/calculate_rse.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/conduct_multiple_surveys.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/create_plot_from_simulation.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/get_total_values.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/make_anglers.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/plot_multiple_objects.R', echo=TRUE)
source('C:/Users/Steven Harris Ranney/repositories/AnglerCreelSurveySimulation/R/simulate_bus_route.R', echo=TRUE)
start_time <- 0
wait_time <- 8
n_anglers <- 50
n_sites <- 1
sampling_prob <- wait_time/12
mean_catch_rate <- 10
tmp <- conduct_multiple_surveys(91, start_time, wait_time, n_anglers, n_sites,
sampling_prob,
mean_catch_rate, fishing_day_length = 12,
mean_trip_length = 4)
library(ggplot2)
library(dplyr)
start_time <- 0
wait_time <- 8
n_anglers <- 50
n_sites <- 1
sampling_prob <- wait_time/12
mean_catch_rate <- 10
tmp <- conduct_multiple_surveys(91, start_time, wait_time, n_anglers, n_sites,
sampling_prob,
mean_catch_rate, fishing_day_length = 12,
mean_trip_length = 4)
tmp
head(tmp)
devtools::build_win()
roxygen2::roxygenize()
start_time = .001
end_time = 12
mean_catch_rate = 0.1
data <- make_anglers(100)
t_effort <- sum(data$trip_length)
n_anglers <- nrow(data)
lambda <- rgamma(n_anglers, mean_catch_rate)
#Calculate true total catch for all anglers
total_catch <- sum(data$trip_length * lambda)
data$catch <- data$trip_length * lambda
data <-
data %>%
mutate(catch = data$trip_length * lambda)
#Provide a 'standard' wait time of .5 hours for the clerk
if(is.null(wait_time) & is.null(end_time)){
wait_time <- 0.5
}
if(!is.null(end_time)){
wait_time <- end_time - start_time
}
if(is.null(start_time)){
start_time <- runif(1, 0, 11.5)
}
wait_time
if(is.null(end_time)){
end_time <- start_time + wait_time # how long into the fishing day did the creel clerk depart?
}
n_anglers_entire_time <- length(which(data$start_time < start_time & data$departure_time > end_time))
entire_time <- which(data$start_time <= start_time & data$departure_time >= end_time)
#how long were the anglers that arrived after the creel there before the clerk left?
if(n_anglers_entire_time > 0){
entire_time_sum_effort <- n_anglers_entire_time * (wait_time)
} else {
entire_time_sum_effort <- 0
}
angler_arrivals <- length(which(data$start_time > start_time & data$start_time < end_time & data$departure_time > end_time))
arrivals <- which(data$start_time > start_time & data$start_time < end_time & data$departure_time > end_time)
#how long were the anglers that arrived after the creel there before the clerk left?
if(angler_arrivals > 0){
arrival_sum_effort <- sum(end_time - data$start_time[arrivals])
} else {
arrival_sum_effort <- 0
}
#Completed trip information; i.e., anglers that LEFT while the creel clerk
# was on site
#Did any anglers depart (complete their trips?) while the creel clerk was there
#OR did any anglers both arrive AND depart while the clerk was on site?
angler_departures <- length(which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time)))
which_angler_departures <- which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time))
arr_dep <- length(which(data$start_time > start_time & data$departure_time < end_time))
which_arr_dep <- which(data$start_time > start_time & data$departure_time < end_time)
completed_trips <- c(which(data$start_time < start_time & data$departure_time < end_time & data$departure_time > start_time),
which(data$start_time > start_time & data$departure_time < end_time))
if((angler_departures + arr_dep) > 0){
total_completed_trip_effort <- sum(data$trip_length[completed_trips]/sampling_prob)
total_completed_trip_catch <- sum(data$catch[completed_trips]/sampling_prob)
} else {
total_completed_trip_effort <- 0
total_completed_trip_catch <- 0
}
#Convert tripLengths
data$trip_length[entire_time] <- wait_time
data$trip_length[arrivals] <- end_time - data$start_time[arrivals]
data$trip_length[which_angler_departures] <- data$departure_time[which_angler_departures] - start_time
data$trip_length[which_arr_dep]
data$trip_length %>% head()
which_arr_dep
anglers[1]
data[1]
data[, 1]
data %>% head()
arr_dep
data$trip_length[entire_time]
data$trip_length[arrivals]
data$trip_length[which_angler_departures]
data$trip_length[entire_time] <- wait_time
data$trip_length[arrivals] <- end_time - data$start_time[arrivals]
data$trip_length[which_angler_departures] <- data$departure_time[which_angler_departures] - start_time
data$trip_length[which_arr_dep] <- data$departure_time[which_arr_dep] - start_time
data$trip_length
#Scale triplength based upon the sampling probability
data$trip_length_adj <- data$trip_length/sampling_prob
observed_trips <- data$trip_length_adj[c(entire_time,  arrivals, which_angler_departures, which_arr_dep)]
n_observed_trips <- length(observed_trips)
total_observed_trip_effort <- sum(observed_trips)
data.frame(n_observed_trips = n_observed_trips,
total_observed_trip_effort = total_observed_trip_effort,
n_completed_trips = sum(angler_departures, arr_dep),
total_completed_trip_effort = total_completed_trip_effort,
total_completed_trip_catch = total_completed_trip_catch,
start_time = start_time,
wait_time = wait_time,
total_catch = total_catch,
true_effort = sum(data$trip_length),
mean_lambda = mean(lambda))
################
#Completed trip information; i.e., anglers that LEFT while the creel clerk
# was on site
#Did any anglers depart (complete their trips?) while the creel clerk was there
#OR did any anglers both arrive AND depart while the clerk was on site?
angler_departures <- length(which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time)))
which_angler_departures <- which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time))
arr_dep <- length(which(data$start_time > start_time & data$departure_time < end_time))
which_arr_dep <- which(data$start_time > start_time & data$departure_time < end_time)
completed_trips <- c(which(data$start_time < start_time & data$departure_time < end_time & data$departure_time > start_time),
which(data$start_time > start_time & data$departure_time < end_time))
if((angler_departures + arr_dep) > 0){
total_completed_trip_effort <- sum(data$trip_length[completed_trips]/sampling_prob)
total_completed_trip_catch <- sum(data$catch[completed_trips]/sampling_prob)
} else {
total_completed_trip_effort <- 0
total_completed_trip_catch <- 0
}
#Convert tripLengths
data$trip_length[entire_time] <- wait_time
data$trip_length[arrivals] <- end_time - data$start_time[arrivals]
data$trip_length[which_angler_departures] <- data$departure_time[which_angler_departures] - start_time
data$trip_length[which_arr_dep]
#Scale triplength based upon the sampling probability
data$trip_length_adj <- data$trip_length/sampling_prob
observed_trips <- data$trip_length_adj[c(entire_time,  arrivals, which_angler_departures, which_arr_dep)]
n_observed_trips <- length(observed_trips)
total_observed_trip_effort <- sum(observed_trips)
data.frame(n_observed_trips = n_observed_trips,
total_observed_trip_effort = total_observed_trip_effort,
n_completed_trips = sum(angler_departures, arr_dep),
total_completed_trip_effort = total_completed_trip_effort,
total_completed_trip_catch = total_completed_trip_catch,
start_time = start_time,
wait_time = wait_time,
total_catch = total_catch,
true_effort = sum(data$trip_length),
mean_lambda = mean(lambda))
t_effort <- sum(data$trip_length)
n_anglers <- nrow(data)
lambda <- rgamma(n_anglers, mean_catch_rate)
#Calculate true total catch for all anglers
total_catch <- sum(data$trip_length * lambda)
data <-
data %>%
mutate(catch = data$trip_length * lambda)
#Provide a 'standard' wait time of .5 hours for the clerk
if(is.null(wait_time) & is.null(end_time)){
wait_time <- 0.5
}
if(!is.null(end_time)){
wait_time <- end_time - start_time
}
if(is.null(start_time)){
start_time <- runif(1, 0, 11.5)
}
# how long into the fishing day did the creel clerk arrive?
if(is.null(end_time)){
end_time <- start_time + wait_time # how long into the fishing day did the creel clerk depart?
}
################
#Effort of anglers that were onsite for the duration of the time that the clerk
# was onsite
#How many anglers were at the site the entire time the creel surveyor was there?
n_anglers_entire_time <- length(which(data$start_time < start_time & data$departure_time > end_time))
entire_time <- which(data$start_time <= start_time & data$departure_time >= end_time)
#how long were the anglers that arrived after the creel there before the clerk left?
if(n_anglers_entire_time > 0){
entire_time_sum_effort <- n_anglers_entire_time * (wait_time)
} else {
entire_time_sum_effort <- 0
}
################
#Effort of anglers that arrived after the clerk arrived and stayed beyond the
# clerk's wait time
#how many anglers arrived while the clerk was on site?
angler_arrivals <- length(which(data$start_time > start_time & data$start_time < end_time & data$departure_time > end_time))
arrivals <- which(data$start_time > start_time & data$start_time < end_time & data$departure_time > end_time)
#how long were the anglers that arrived after the creel there before the clerk left?
if(angler_arrivals > 0){
arrival_sum_effort <- sum(end_time - data$start_time[arrivals])
} else {
arrival_sum_effort <- 0
}
#Did any anglers depart (complete their trips?) while the creel clerk was there
#OR did any anglers both arrive AND depart while the clerk was on site?
angler_departures <- length(which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time)))
which_angler_departures <- which(data$start_time < start_time & (start_time < data$departure_time) & (data$departure_time < end_time))
arr_dep <- length(which(data$start_time > start_time & data$departure_time < end_time))
which_arr_dep <- which(data$start_time > start_time & data$departure_time < end_time)
completed_trips <- c(which(data$start_time < start_time & data$departure_time < end_time & data$departure_time > start_time),
which(data$start_time > start_time & data$departure_time < end_time))
if((angler_departures + arr_dep) > 0){
total_completed_trip_effort <- sum(data$trip_length[completed_trips]/sampling_prob)
total_completed_trip_catch <- sum(data$catch[completed_trips]/sampling_prob)
} else {
total_completed_trip_effort <- 0
total_completed_trip_catch <- 0
}
#Convert tripLengths
data$trip_length[entire_time] <- wait_time
data$trip_length[arrivals] <- end_time - data$start_time[arrivals]
data$trip_length[which_angler_departures] <- data$departure_time[which_angler_departures] - start_time
data$trip_length[which_arr_dep]# <- data$departure_time[which_arr_dep] - start_time
data$trip_length
completed_trips
completed_trips
devtools::build()
devtools::check()
devtools::build()
roxygen2::roxygenize()
?devtools::check()
library(devtools)
?check
roxygen2::roxygenize()
n_anglers <- 100
mean_trip_length = 3.88
fishing_day_length = 123
fishing_day_length = 12
anglers <- list()
i=1
startTime=tripLength=departureTime=NULL
while(i <= n_anglers){
startTime.tmp <- c(runif(1, 0, fishing_day_length - 0.25))
tripLength.tmp <- rgamma(1, mean_trip_length, scale = 1)
departureTime.tmp <- startTime.tmp+tripLength.tmp
if(departureTime.tmp < fishing_day_length){
i=i+1
startTime <- c(startTime, startTime.tmp)
tripLength <- c(tripLength, tripLength.tmp)
departureTime <- c(departureTime, departureTime.tmp)
}
}
anglers$start_time <- startTime
anglers$trip_length <- tripLength
anglers$departure_time <- departureTime
true_effort <- sum(anglers$trip_length)
anglers %>%
bind_cols() %>%
as.data.frame()
anglers
start_time
startTime
anglers <-
anglers %>%
mutate(start_time = startTime,
trip_length = tripLength,
departure_time = departureTime)
n_anglers = 100
mean_trip_length = 3.88
fishing_day_length = 12
i=1
startTime=tripLength=departureTime=NULL
while(i <= n_anglers){
startTime.tmp <- c(runif(1, 0, fishing_day_length - 0.25))
tripLength.tmp <- rgamma(1, mean_trip_length, scale = 1)
departureTime.tmp <- startTime.tmp+tripLength.tmp
if(departureTime.tmp < fishing_day_length){
i=i+1
startTime <- c(startTime, startTime.tmp)
tripLength <- c(tripLength, tripLength.tmp)
departureTime <- c(departureTime, departureTime.tmp)
}
}
anglers <-
data.frame(start_time = startTime,
trip_length = tripLength,
departure_time = departureTime)
true_effort <- sum(anglers$trip_length)
return(anglers)
roxygen2::roxygenize()
roxygen2::roxygenize()
version
?rmarkdown
??rmarkdown
library(rmarkdown)
?rmarkdown
?knitr::rmarkdown
?devtools::use_vignette()
?devtools::use_vignette("Creel Survey Simulations")
devtools::use_vignette("creel_survey_simulation")
?vignette
?knitr::rmarkdown
devtools::build()
